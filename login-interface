#!/bin/bash

# Setup script for login-interface project with improved user experience

# Define the project directory
PROJECT_DIR="/data/data/com.termux/files/home/login-interface"
mkdir -p $PROJECT_DIR
cd $PROJECT_DIR

# Function to check if required dependencies are installed
check_dependencies() {
    echo "Checking if all dependencies are installed..."
    pkg update && pkg upgrade -y
    pkg install -y git curl wget openssl bash rclone
}

# Function to encrypt sensitive files
encrypt_files() {
    echo "Encrypting sensitive files for security..."
    openssl enc -aes-256-cbc -salt -in sensitive_data.txt -out sensitive_data.txt.enc -k "your_secret_key"
}

# Function to decrypt sensitive files
decrypt_files() {
    echo "Decrypting sensitive files..."
    openssl enc -d -aes-256-cbc -in sensitive_data.txt.enc -out sensitive_data.txt -k "your_secret_key"
}

# Function to sync with GitHub
git_sync() {
    echo "Syncing with the latest updates from GitHub..."
    git fetch origin
    git reset --hard origin/main
}

# Function for login or account creation
login_or_create_account() {
    clear
    echo "====================================="
    echo "     Welcome to Login-Interface"
    echo "====================================="
    echo "Please select an option:"
    echo "1. Login"
    echo "2. Create New Account"
    echo "====================================="
    read -p "Enter your choice (1 or 2): " choice
    case $choice in
        1) login ;;
        2) create_account ;;
        *) echo "Invalid choice. Please try again." && login_or_create_account ;;
    esac
}

# Login function
login() {
    clear
    echo "====================================="
    echo "          User Login"
    echo "====================================="
    read -p "Enter your username: " username
    read -s -p "Enter your password: " password
    echo
    # Simulate login validation (you can add actual validation logic here)
    echo "Login successful! Welcome, $username."
    main_menu
}

# Account creation function
create_account() {
    clear
    echo "====================================="
    echo "        Create New Account"
    echo "====================================="
    read -p "Enter a new username: " new_username
    read -s -p "Enter a new password: " new_password
    echo
    # Simulate account creation (you can add saving to a database or file here)
    echo "Account successfully created! Welcome, $new_username."
    main_menu
}

# Main menu with options after login
main_menu() {
    clear
    echo "====================================="
    echo "      Main Menu - Choose an option"
    echo "====================================="
    echo "1. Project Management"
    echo "2. Tools"
    echo "3. Google Search"
    echo "4. Backup / Restore"
    echo "5. Settings"
    echo "6. Exit"
    echo "====================================="
    read -p "Enter your choice (1-6): " choice
    case $choice in
        1) project_menu ;;
        2) tools_menu ;;
        3) google_search ;;
        4) backup_restore ;;
        5) settings_menu ;;
        6) exit ;;
        *) echo "Invalid choice. Please try again." && main_menu ;;
    esac
}

# Project menu
project_menu() {
    clear
    echo "====================================="
    echo "        Project Management"
    echo "====================================="
    echo "1. Clone New Repository"
    echo "2. View All Repositories"
    echo "3. Return to Main Menu"
    echo "====================================="
    read -p "Enter your choice (1-3): " choice
    case $choice in
        1) clone_new_repository ;;
        2) view_repositories ;;
        3) main_menu ;;
        *) echo "Invalid choice. Please try again." && project_menu ;;
    esac
}

# Tools menu
tools_menu() {
    clear
    echo "====================================="
    echo "                Tools"
    echo "====================================="
    echo "1. Open All Repositories"
    echo "2. Return to Main Menu"
    echo "====================================="
    read -p "Enter your choice (1-2): " choice
    case $choice in
        1) open_all_repositories ;;
        2) main_menu ;;
        *) echo "Invalid choice. Please try again." && tools_menu ;;
    esac
}

# Google search function
google_search() {
    clear
    echo "====================================="
    echo "             Google Search"
    echo "====================================="
    read -p "Enter your search query: " query
    echo "Searching Google for: $query..."
    curl "https://www.google.com/search?q=$query"
    main_menu
}

# Backup and Restore menu
backup_restore() {
    clear
    echo "====================================="
    echo "        Backup and Restore"
    echo "====================================="
    echo "1. Backup to GitHub"
    echo "2. Backup to Google Drive"
    echo "3. Restore from GitHub"
    echo "4. Restore from Google Drive"
    echo "5. Return to Main Menu"
    echo "====================================="
    read -p "Enter your choice (1-5): " choice
    case $choice in
        1) backup_github ;;
        2) backup_google_drive ;;
        3) restore_github ;;
        4) restore_google_drive ;;
        5) main_menu ;;
        *) echo "Invalid choice. Please try again." && backup_restore ;;
    esac
}

# Backup to GitHub
backup_github() {
    clear
    echo "Backing up data to GitHub..."
    git add .
    git commit -m "Backup commit"
    git push origin main
    echo "Backup successful!"
    backup_restore
}

# Backup to Google Drive (using rclone)
backup_google_drive() {
    clear
    echo "Backing up data to Google Drive..."
    rclone sync $PROJECT_DIR remote:login-interface-backups
    echo "Backup successful!"
    backup_restore
}

# Restore from GitHub
restore_github() {
    clear
    echo "Restoring data from GitHub..."
    git pull origin main
    echo "Restore successful!"
    backup_restore
}

# Restore from Google Drive (using rclone)
restore_google_drive() {
    clear
    echo "Restoring data from Google Drive..."
    rclone sync remote:login-interface-backups $PROJECT_DIR
    echo "Restore successful!"
    backup_restore
}

# Settings menu
settings_menu() {
    clear
    echo "====================================="
    echo "             Settings"
    echo "====================================="
    echo "1. Change Theme"
    echo "2. Change Username"
    echo "3. Change Password"
    echo "4. Return to Main Menu"
    echo "====================================="
    read -p "Enter your choice (1-4): " choice
    case $choice in
        1) change_theme ;;
        2) change_username ;;
        3) change_password ;;
        4) main_menu ;;
        *) echo "Invalid choice. Please try again." && settings_menu ;;
    esac
}

# Change theme
change_theme() {
    clear
    echo "====================================="
    echo "          Change Theme"
    echo "====================================="
    echo "1. Default"
    echo "2. Dark Mode"
    echo "3. Light Mode"
    echo "4. Return to Settings"
    echo "====================================="
    read -p "Enter your choice (1-4): " choice
    case $choice in
        1) echo "Changing to Default theme..." ;;
        2) echo "Changing to Dark Mode..." ;;
        3) echo "Changing to Light Mode..." ;;
        4) settings_menu ;;
        *) echo "Invalid choice. Please try again." && change_theme ;;
    esac
}

# Change username
change_username() {
    clear
    echo "====================================="
    echo "         Change Username"
    echo "====================================="
    read -p "Enter a new username: " new_username
    echo "Username updated to: $new_username"
    settings_menu
}

# Change password
change_password() {
    clear
    echo "====================================="
    echo "         Change Password"
    echo "====================================="
    read -s -p "Enter a new password: " new_password
    echo
    echo "Password updated."
    settings_menu
}

# Encrypt sensitive files
encrypt_files

# Sync with GitHub
git_sync

# Start the login or account creation process
login_or_create_account
